from cv2
from numpy as np
				~images~
imread('dir')
np.zeros((width, height, colchannels), dtype='') #dtype uint8 for image

imwrite('dir', imob)

ob.imshow('windowname', imob)

waitkey(time)


~geometric transformations~
resize(imob, (width, height), interpolation=cv.INTER_AREA)
flip(imob, int) #int can be 0, 1, -1
warpAffine(imob, matrix, (x, y))
img[x:y, x:y] #for cropping

#Bitwise operations
bitwise_and(im1, im2, *mask) #returns intersections
bitwise_or(im1, im2) #returns union
bitwise_xor(im1, im2) #returns non-intersecting regions
bitwise_not(im1, im2) #returns inversion

~drawing and text~
rectangle(imob, pt1, pt2, colortuple, *thickness, *linetype))
circle(imob, center, radius, colortuple, *thickness)
line(imob, pt1, pt2, coltuple, *thickness)
putText(imob, 'text, origin, fontface, fontscale, coltuple, *thickness)
calcHist([imgs], [colchannels], mask, [histsize], [maxrange])

~color transformations~
cvtColor(imob, trans) 
#COLOR_ variables: COLOR_BGR2GRAY, COLOR_BGR2HSV, COLOR_BGR2LAB
split(imob)
merge([b, g, r])

~processes~
#blurs
GaussianBlur(img, kernel, cv.BORDER_DEFAULT)
blur(imob, kernel) #averaging blur 
medianBlur(imob, kernel) # median blur, kernel must be int 
bilateralBlur(imob, diam, sigmaSpace, sigmaSpace)

#edge detection
Canny(imob, threshold1, threshold2)
Laplacian(img, cv.CV_64F) must be followed by res = np.uint8(np.absolute(lap))
Sobel(imob, cv.CV_64F, x, y)

dilate(imob, kernel, *iterations)
erode(imob, kernel, *iterations)

#thresholding
threshold(imob, threshold, maxval, threshtype) #THRESH_BINARY or THRESH_BINARY_INV for thresh type
adaptiveThreshold(imob, maxval, method, threshtype, intkernel, C) #ADAPTIVE_THRESH_ variables for method

~contours~
findCountours(imob, mode, approximation)
#modes: RETR_LIST, RETR_TREE, RETR_EXTERNAL
# approximations: CHAIN_APPROX_NONE, CHAIN_APPROX_SIMPLE
drawContours(img, contours, -1, coltuple, *thickness)

~matrix generation~
np.float32([[1, 0, x], [0, 1, y]]) #creates translation matrix
getRotationMatrix2D(rotPoint, angle, scaling) #creates rotation matrix


				~deep vision~
#face detection
CascadeClassifier('xml')
classob.detectMultiScale(imob, *scale, *minNeighbors)

#face recognition
from cv2.face
LBPHFaceRecognizer #instantiates face recognizer
recog.train(featureslist, labellist) #trains recognizer
recog.save("filename.yml")
recog.read("filename.yml")
recog.predict(img)

np.array(arr, *dtype) #dtype 'object' for images
np.save('filename.npy', nparr)

				~video~

VideoCapture('dir', CAP_DSHOW) #give int for camera

ob.read()

ob.set(int, val) # int: 3 for width, 4 for height
ob.release()
destroyAllWindows()