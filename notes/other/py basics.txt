String functions
	string.lower()
	string.upper()
	len(string)
	phrase[index]
	string.index(search)
	string.replace(toreplace, replacer)
	string.split
	string.isupper()
	string.islower()
	string1.startswith(string2)
	string1.endswith(string2)
	string.format()
	string.split(delimiter)
	delimiter.join(list)

math functions
	pow(base, exponent)
	max(n1, n2)
	min(n1, n2)
	round(n)
from math
	floor(n)
	ceil(n)
	sqrt(n)

list functions
	list()
	list1.extend(list2)
	list.append(element)
	list.insert(index, element)
	list.remove(element)
	list.clear()
	list.pop()
	list.index(element)
	list.count(element)
	list.sort()
	list.reverse()
	list.copy()
	sorted(list, key)
	map(func, list)
	filter(func, list)
(from functools)
	reduce(func, list)
	
dictionary functions
	clear()	Removes all the elements from the dictionary
	copy()	Returns a copy of the dictionary
	fromkeys()	Returns a dictionary with the specified keys and value
	get()	Returns the value of the specified key
	items()	Returns a list containing a tuple for each key value pair
	keys()	Returns a list containing the dictionary's keys
	values()	Returns a list of all the values in the dictionary
	pop()	Removes the element with the specified key
	popitem()	Removes the last inserted key-value pair
	setdefault()	Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
	update()	Updates the dictionary with the specified key-value pairs or another dictionary


set functions
	add()
	clear()
	copy()
	difference()
	difference_update()
	discard()
	intersection()
	intersection_update()	
	isdisjoint()
	issubset()
	issuperset()	
	pop()
	remove()
	symmetric_difference()
	symmetric_difference_update()
	union()
	update()

collection functions (from collections module)
	counter(string) # creates a dict from string, key being each character and element its repetition
	Count.most_common(x) #returns values of most common elements (by repetition, first x values)
	Count.elements # returns iterable of elements in counter dict. must be taken as list.

	namedtuple(objname, "element names") #creates object of class whose objects return tuples whose elements can be referred to by name

	defaultDict(defaultType)

	deque() #creates deque (list type)
	Deq.appendleft(element)
	Deq.popleft()
	Deq.extenleft(list)
	Deq.rotate(x) #rotates elements X times to the right

math functions
	pow(base, exponent)
	max(n1, n2)
	min(n1, n2)
	round(n)
from math
	floor(n)
	ceil(n)
	sqrt(n)

file handling functions
#w for writing. creates file and overwrites prev names
#a for appending. does not create or overwrite
#r for reading
#r+ for reading and writing.
#rb for reading images
#wb for writing images
#file ob can be iterated through line wise

	open("file name", "method of opening") #opens file
	file.close() #closes file
	file.name
	file.mode
	file.open
	file.closed
	file.tell() #tells cursor location
	file.seek(n) # moves cursor
	file.readable() #returns boolean for readability
	file.read(n) #reads first n chars of file
	file.readline() #reads first line of file, moves cursor
	file.readlines() #creates list from lines of file
	file.readlines[index] #reads index line of file


	file.write(string) # adds string to end of file

random numbers
(from random)
	random.random()
	random.uniform(start, end)
	random.randint(start, end) #includes end
	random.randrange(start, end)
	random.choice(list)
	random.sample(list, n) #does not repeat same element
	random.choices(list, k=) #repeats same element
	random.shuffle(list)
(from secrets)
	secrets.randbelow(end)
	secrets.randbits(b)
	secrets.choice(list)
(from numpy, pip installed)
	numpy.random.rand(n)
	numpy.random.rand(n, n)
	numpy.random.randint(start, end, n)
	numpy.random.randint(start, end, (n, n))
		#where n is dimension of array
	 

miscellaneous functions:
	type() #returns data type
	dir() #returns attributes of object
	isinstance(obj, class)




